---
layout: post
title:  "REST API using Python"
date:   2019-06-10 17:45:00 +0530
categories: Python REST-API Flask
---
Flask is the micro-framework which we’ll be using to develop some REST API and deploying them for a web application. Micro-framework are basically the frameworks which are having very less or no dependencies to external libraries or packages which simply means that the framework is light.

<img src="https://cdn-images-1.medium.com/max/800/1*0G5zu7CnXdMT9pGbYUTQLQ.png" class="center">

Here are the things which we’ll do in this article:

1. Making a normal Python application which do some prediction based on the trained dataset.
2. Converting it into a Flask App.
3. Making a Web Interface to interact with it.
4. Running it locally. Also, it can be easily deployed to Google Compute Engine.

Note: The procedure to make the prediction algorithm is not discussed here. I am assuming that the python application is ready and now we have to making REST API using it.

So, now let’s get started with this.

So, this is the Python Script that we’ll be dealing with. It is a prediction algorithm which is already having a trained dataset of Movie Reviews.
Note: Make sure to download the trained model file from <a href="https://github.com/codejockey02/mocialFlaskAPI/blob/master/model.pkl">here</a>.
```python
#!/usr/bin/env python3
# -*- coding: utf-8 -*-
import pickle
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
def create_word_features(words):
    useful_words = [word for word in words if word not in    stopwords.words(‘english’)]
    my_dict = dict([(word, True) for word in useful_words])
    return my_dict
model = pickle.load(open(“model.pkl”,”rb”)) 
def reviewmovie(dat):
     words=word_tokenize(dat)
     words=create_word_features(words)
     return(model.classify(words))
 
send = reviewmovie(‘A Good Movie’)
print(send)
```
Set up the environment before running this code. I prefer having Anaconda and Spyder. You can also run it on IDLE provided you are having the libraries that are required.
If you run the above snippet, it should give output like this:

<img src="https://cdn-images-1.medium.com/max/800/1*ghUTBZv4lfy5M39VE5cWfQ.png" class="center">

Till now, everything is going good. It’s time setup Flask now.

Run this simple command on your Terminal and the micro-framework will be installed:
```
pip install Flask
```
If you are not having pip, you’ve to install it first:
```
curl https://bootstrap.pypa.io/get-pip.py -o get-pip.py
python get-pip.py
```
So, now the Flask environment is setup. Let’s go to the step number 2 now.

First, we have to import Flask to our application.
```
from flask import Flask
```
Now, also, import request from Flask to get data through the route.
```
from flask import request
```
It is very easy to make a route here:
```python
@app.route('/yourRouteName', methods=['GET'or'POST'])
def anyFunction():
    Your function here from the Python Application.
```
To run the application:
```python
if __name__ == "__main__":
    app.run("127.0.0.1", "8080", debug=True)
```
Transforming the above Python Script into a Flask Application:
```python
import pickle
from flask import Flask
from flask import request
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
def create_word_features(words):
    useful_words = [word for word in words if word not in stopwords.words('english')]
    my_dict = dict([(word, True) for word in useful_words])
    return my_dict
app = Flask(__name__)
model = pickle.load(open("model.pkl", "rb"))
@app.route('/', methods=['GET'])
def index():
    return "Hello there, the flask application is now LIVE. "
@app.route('/getrating', methods=['POST'])
def predict():
    # getting the review from the user through the node API
    review = request.form['review']
    words = word_tokenize(review)
    words = create_word_features(words)
    return (model.classify(words))
if __name__ == "__main__":
    app.run("127.0.0.1", "8080", debug=True)
```
You can test it using Postman, the routes should be working fine.
```
python main.py
```

<img src="https://cdn-images-1.medium.com/max/800/1*OG7M7MrU_neAh1twbQDHKQ.png" class="center">

Now, let’s move to the easiest part. To make a front-end to send text data and get the review. “KIDS STUFF”

P.S: Ignore the styling.
```html
<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Prediction</title>
</head>
<body>
<style>
        * {
            margin: 0px;
            padding: 0px;
        }
#top {
            background-color: #DE5757;
            width: 1440px;
            height: 100px;
margin-bottom: 40px;
}
#heading {
            color: #ffffff;
            font-size: 40px;
            font-family: 'Courier New', Courier, monospace;
            font-weight: bold;
            text-align: center;
            padding-top: 30px;
        }
#cHead {
            font-size: 18px;
            font-family: 'Courier New', Courier, monospace;
            color: #212121;
        }
#gola {
            border: 1px solid #DE5757;
            width: 500px;
            margin: 5px;
            margin-left: 25px;
            padding: 2px;
            margin-top: 25px;
            padding-left: 10px;
            border-radius: 3px;
        }
#choose {
            padding: 5px;
            margin-left: 25px;
        }
.upload-btn-wrapper {
            position: relative;
            overflow: hidden;
            display: inline-block;
        }
.btn {
            border: 2px solid gray;
            color: gray;
            background-color: white;
            padding: 1px 3px;
            border-radius: 8px;
            font-size: 12px;
            font-weight: bold;
        }
.upload-btn-wrapper input[type=file] {
            font-size: 50px;
            position: absolute;
            left: 0;
            top: 0;
            opacity: 0;
        }
    </style>
<div id="top">
<p id="heading">Let's get it Predicted</p>
    </div>
<fieldset id="gola">
        <legend></legend>
        <p id="cHead">Enter some movie review </p>
</fieldset>
<form action="/getrating" enctype="multipart/form-data" method="POST">
<input type="text" name="review" id="choose" />
        <div class="upload-btn-wrapper">
            <input class="btn" type="submit" value="Predict" id="submit" />
        </div>
    </form>
</body>
</html>
```
The final python file which will be receiving text data from the client side, will be like this:
```python
import pickle
from flask import Flask
from flask import request
from flask import render_template
from nltk.corpus import stopwords
from nltk.tokenize import word_tokenize
def create_word_features(words):
    useful_words = [
        word for word in words if word not in stopwords.words('english')]
    my_dict = dict([(word, True) for word in useful_words])
    return my_dict
app = Flask(__name__, template_folder='templates')
model = pickle.load(open("model.pkl", "rb"))
@app.route('/', methods=['GET'])
def index():
    return render_template('client.html')
@app.route('/getrating', methods=['POST'])
def predict():
    # getting the review from the user through the node API
    review = request.form['review']
    words = word_tokenize(review)
    words = create_word_features(words)
    return (model.classify(words))
if __name__ == "__main__":
    app.run("127.0.0.1", "8080", debug=True)
```
So, the web application is ready now. You can run it on localhost now.
```
python main.py
```
<img src="https://cdn-images-1.medium.com/max/800/1*ZcC0W52C_2NmNJMz1yBo3A.png" class="center">